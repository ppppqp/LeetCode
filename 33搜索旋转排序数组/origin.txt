class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int i=nums.size()/2;
        if(nums.size()==0) return -1;
        return arrange(0,nums.size()-1,nums,target);
        }
    int arrange(int left,int right, vector<int>&nums, int target)
    {
        int i=(left+right)/2;
        if(left==right)
        {
            if(nums[left]==target) return left;
            else return -1;
        }
           if(nums[i]>nums[left])
           {
               if(find(left,i,nums,target)!=-1)
                   return find(left,i,nums,target);
               return arrange(i+1,right,nums,target);
           }
            else
            {   
                if(find(i,right,nums,target)!=-1)
                    return find(i,right,nums,target);
                return arrange(left,i,nums,target);
            }
        return -1;
            
    }
     int find(int i, int j, vector<int> &nums,int target)
    {
         cout<<"i="<<i<<' '<<"j="<<j<<endl;
        int mid=(i+j)/2;
        if(nums[i]==target) return i;
        if(nums[j]==target) return j;
        while(i<=j)
        {mid=(i+j)/2;
         cout<<"i="<<i<<' '<<"j="<<j<<endl;
            if(nums[mid]==target) return mid;
            else
            {cout<<"mid="<<mid;
                if(nums[mid]<target)
                {
                    i=mid+1;
                }
             if(nums[mid]>target) 
             {
                 j=mid-1;
             }
            }
        }
        return -1;
    }
};
   
    