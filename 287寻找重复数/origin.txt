class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       //thought No.1: compare each pairs, BUT the time complexity is too large (n^2)
       //thought No.2: sum all, find the difference with sum from 1 to n. BUT the duplicate may appear more than once.
        /*
        eg. [1 3 4 2 2]
        1+2+3+4=10
        1+2+3+4+2=12
        12-10=2

        eg. [1 3 4 2 2 2]
        1+2+3+4+5=15
        1+2+3+4+2+2=14
        14-15=-1
        if the difference is -1 with n being 5, does it mean that 2 is duplicate?

        5=(2+2)+1
        1=(0+0)+1
        2=(0.5+0.5)+1
        3=(1+1)+1   1+1+1+2+4+5=14
        */
        int n=nums.size()-1;
        int l=1;
        int r=n;
        int ans=0;
        cout<<"n="<<n<<endl;
        cout<<"r="<<r<<endl;
        while(1){
            int bigger=0;
            int smaller=0;
            int equal=0;
            int equal2=0;
            double mid=(l+r)*0.5;
            int i=0;
            //cout<<"mid="<<mid<<' ';//the possible weight balance
            for(i=0;i<=n;i++)
            {
                if(nums[i]>mid&&nums[i]<=r) bigger++;
                if(nums[i]<mid&&nums[i]>=l) smaller++;
                if(nums[i]==mid) equal++;
            }
            if(equal>=2){
                ans=mid;
                break;
            }
            

            //cout<<"bigger="<<bigger<<' ';
            //cout<<"smaller="<<smaller<<endl;
            //cout<<"l="<<l<<' ';
            //cout<<"r="<<r<<' '<<endl;
            if(bigger>smaller) l=ceil(mid);
            if(bigger<=smaller) r=floor(mid);
            
        }
        return ans;
    }
};