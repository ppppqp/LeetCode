class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        
        vector<vector<int>> ref(N+1);
        vector<int> color(N+1,-1);
        for(int i=0;i<dislikes.size();i++)
        {
            ref[dislikes[i][0]].push_back(dislikes[i][1]);
            ref[dislikes[i][1]].push_back(dislikes[i][0]);    
        }
        //cout<<ref[1][0]<<ref[1][1]<<ref[1][2]<<ref[1][3];
        for(int i=1;i<=N;i++)
        {
            
            if(color[i]==-1&&!dfs(ref,color,i,1))return false;
        }
        return true;
        
        
    }
    bool dfs(vector<vector<int>> &ref, vector<int> &color, int i,int c)
    {
        if(color[i]!=-1)
        {
            return color[i]==c;
        }
        
        color[i]=c;
        cout<<"i="<<i<<"color="<<color[i];
        for(int j=0;j<ref[i].size();j++)
        {
            if(!dfs(ref,color,ref[i][j],1-c)) return 0;
        }
        return 1;
        
        
    }
};