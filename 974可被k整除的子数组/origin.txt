class Solution {
public:
    int subarraysDivByK(vector<int>& A, int K) {

        vector<int> remainder(A.size());// to store the remainder of each element in A
        vector<int> prevsum(A.size()+1);// prevsum[i] records the sum of remainder[0]~remainder[i]
        vector<int> record(A.size()+1); // record[i] stores the number of eligible combination that ends with i
        int sum = 0;
        for ( int i = 0; i < A.size(); i++){
            remainder[i] = A[i] % K;
            sum += A[i];
            prevsum[i+1] = sum % K;
            if(prevsum[i+1] < 0) prevsum[i+1]+= K;
            record[i+1]=0;   
        }
        prevsum[0] = 0;
         int count=0;
        record[0] = 1;// [0:i]can be an eligibal combination
        for(int i = 1; i <= A.size(); i++)
        {
            for( int j = i-1; j >= 0; j--){
                if((prevsum[i]-prevsum[j]) ==0){
                    record[i] += record[j]; // all the combination end with j plus [j:i] can be an eligibal combination
                    if(j!=0) record[i] ++;// [j:i] 
                    //cout<<"i="<<i<<"j="<<j<<endl;              
                    break;
                }
            }
            count+=record[i];
        }
        return count;
    }
};